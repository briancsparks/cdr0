const express       = require('express');
const path          = require('path');
const socketio      = require('socket.io');
const Namespace     = require('./classes/Namespace');

const app           = express();

// Reads `.env` file and adds sets on process.env
require('dotenv').config();

require('./server1-config')(app, express);
require('./server2-global-middleware')(app, express);

// -------------------------------------------------------------------------------------------------------------------
// ENV
const port          = process.env.PORT          || 8000;

// -------------------------------------------------------------------------------------------------------------------
// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');


// -------------------------------------------------------------------------------------------------------------------
// API Routes
const routes = require('./server3-route-loader');

// -------------------------------------------------------------------------------------------------------------------
// Error handling
require('./server4-error-handling')(app, express);

// -------------------------------------------------------------------------------------------------------------------
// Start

const expressServer = app.listen(port, () => {
  console.log(`Running on port ${port}: / and /api`);
});

// ===================================================================================================================
// ===================================================================================================================

// -------------------------------------------------------------------------------------------------------------------
// socket.io
const io = socketio(expressServer);

const rootNs = new Namespace('/', 'root');

let   namespaces = [rootNs];

// io.on = io.of('/').on = io.sockets.on
// io.emit = io.of('/').emit = io.sockets.emit

namespaces.forEach((namespace) => {
  console.log(namespace);

  io.on('connection', (nsSocket) => {
    // console.log('socket handshake:', nsSocket.handshake);
    // const username = nsSocket.handshake.query.username;
    const username = 'username';

    nsSocket.on('joinRoom', (roomName, callback) => {
      console.log('on-joinRoom', roomName);
      console.log('socket rooms', nsSocket.rooms);

      // nsSocket.leave('roomNameStr');
      nsSocket.join(roomName);
      console.log('socket rooms - after', nsSocket.rooms);

      io.of('/').in(roomName).clients((err, clients) => {
        console.log('clients in room joining', err, clients);
        console.log('numclients', clients.length);
        console.log('socket rooms - after after', nsSocket.rooms);

        callback(clients.length);
      });
    });

    nsSocket.on('msgToRoom', (roomName, msgData, callback) => {
      console.log('on-msgToRoom', roomName, msgData);
      const fullMsg = {
        text: msgData.text,
        username,
        avatar: 'https://via.placeholder.com/30',
        time: Date.now()
      };

      io.of(namespace.endpoint).to(roomName).emit('msgFromRoom',fullMsg);

      if (typeof callback === 'function') {
        return callback(null, {ok:true});
      }
    });

    // send the nsData back to the client. We need to use socket, NOT io, because we want it to go to just this client.
    nsSocket.emit('tellRooms', {nsRooms:[{roomTitle: 'pipeline', privateRoom: false}]});

  });
});



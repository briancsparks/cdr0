const express       = require('express');
const path          = require('path');
const socketio      = require('socket.io');

const app           = express();

// Reads `.env` file and adds sets on process.env
require('dotenv').config();

require('./server1-config')(app, express);
require('./server2-global-middleware')(app, express);

// -------------------------------------------------------------------------------------------------------------------
// ENV
const port          = process.env.PORT          || 8000;

// -------------------------------------------------------------------------------------------------------------------
// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');


// -------------------------------------------------------------------------------------------------------------------
// API Routes
const routes = require('./server3-route-loader');

// -------------------------------------------------------------------------------------------------------------------
// Error handling
require('./server4-error-handling')(app, express);

// -------------------------------------------------------------------------------------------------------------------
// Start

const expressServer = app.listen(port, () => {
  console.log(`Running on port ${port}: / and /api`);
});

// -------------------------------------------------------------------------------------------------------------------
// socket.io
const io = socketio(expressServer);

// io.on = io.of('/').on = io.sockets.on
// io.emit = io.of('/').emit = io.sockets.emit

io.on('connection', (nsSocket)=>{
  // console.log('socket handshake:', socket.handshake);
  // const username = nsSocket.handshake.query.username;

  // // build an array to send back with the img and endpoint for each NS
  // let nsData = namespaces.map((ns)=>{
  //   return {
  //     img: ns.img,
  //     endpoint: ns.endpoint
  //   }
  // })
  // console.log(nsData)

  // // send the nsData back to the client. We need to use socket, NOT io, because we want it to
  // // go to just this client.
  // nsSocket.emit('nsList',nsData);

  nsSocket.on('joinRoom', (roomName, callback) => {
    console.log('on-joinRoom', roomName);
    console.log('socket rooms', nsSocket.rooms);

    // nsSocket.leave('roomNameStr');
    nsSocket.join(roomName);
    console.log('socket rooms - after', nsSocket.rooms);

    io.of('/').in(roomName).clients((err, clients) => {
      console.log('clients in room joining', err, clients);
      console.log('numclients', clients.length);
      console.log('socket rooms - after after', nsSocket.rooms);

      callback(clients.length);
    });

  });

  nsSocket.on('msgToRoom', (msgData, callback) => {
    console.log('on-msgToRoom', msgData);
  });

  nsSocket.emit('tellRoomNames', {rooms:['pipeline']});
});


